from settings import API_KEY, USERS, CCIE_URL, CCNP_URL, PYTHON_URL
import logging
from linkedin_parser import get_jobs

from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup


logging.basicConfig(
    handlers=[logging.FileHandler('bot.log', 'a', 'utf-8')],
    format='%(asctime)s %(message)s',
    # datefmt='%m-%d %H:%M',
    level=logging.INFO #CRITICAL ERROR WARNING  INFO    DEBUG    NOTSET 
)
# logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s %(message)s')

START_TEXT = """
–ü—Ä–∏–≤–µ—Ç. –Ø –ø–∞—Ä—Å–µ—Ä LinkedIn

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
üí° –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /open_menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.
"""

NEW_USER_TEST = "–ü—Ä–∏–≤–µ—Ç. –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /id"


def main():
    mybot = Updater(API_KEY, use_context=True)
    dp = mybot.dispatcher
    dp.add_handler(CommandHandler("open_menu", open_menu))
    dp.add_handler(CommandHandler("id", check_and_start))
    dp.add_handler(MessageHandler(Filters.regex('^(ccie jobs)$'), ccie))
    dp.add_handler(MessageHandler(Filters.regex('^(ccnp jobs)$'), ccnp))
    dp.add_handler(MessageHandler(Filters.regex('^(python_—Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)$'), python_title))
    dp.add_handler(MessageHandler(Filters.regex('^(python_–≤—Å–µ)$'), python_all))
    logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!!!")
    mybot.start_polling()
    mybot.idle()


def user_enable(context):
    if context.user_data.get("enable"):
        return True
    else:
        return False


def check_and_start(update, context):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.username
    if user_id in USERS:
        context.user_data["enable"] = "yes"
        check_result = f'{user_id} {user_name}, –í—ã –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞'
        update.message.reply_text(check_result, reply_markup=main_keyboard())
    else:
        check_result = f'{user_id} {user_name}, –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞'
        update.message.reply_text(check_result, reply_markup=empty_keyboard())
    logging.info(check_result)


def ccie(update, context):
    if user_enable(context):
        for item in get_jobs(CCIE_URL):
            update.message.reply_text(item, reply_markup=main_keyboard())
    else:
        update.message.reply_text(NEW_USER_TEST, reply_markup=empty_keyboard())  


def ccnp(update, context):
    if user_enable(context):
        print(CCNP_URL)
        jobs = get_jobs(CCNP_URL)
        print("len ", len(jobs))
        for item in get_jobs(CCNP_URL):
            update.message.reply_text(item, reply_markup=main_keyboard())
    else:
        update.message.reply_text(NEW_USER_TEST, reply_markup=empty_keyboard())   


def python_title(update, context):
    if user_enable(context):
        for item in get_jobs(PYTHON_URL):
            if "Python" in item:
                update.message.reply_text(item, reply_markup=main_keyboard())
    else:
        update.message.reply_text(NEW_USER_TEST, reply_markup=empty_keyboard()) 


def python_all(update, context):
    if user_enable(context):
        for item in get_jobs(PYTHON_URL):
            update.message.reply_text(item, reply_markup=main_keyboard())
    else:
        update.message.reply_text(NEW_USER_TEST, reply_markup=empty_keyboard()) 


def open_menu(update, context):
    if user_enable(context):
        update.message.reply_text(START_TEXT, reply_markup=main_keyboard())
    else:
        update.message.reply_text(NEW_USER_TEST, reply_markup=empty_keyboard())


def empty_keyboard():
    return ReplyKeyboardMarkup([[]])


def main_keyboard():
    return ReplyKeyboardMarkup([['ccnp jobs'], ['ccie jobs'],["python_—Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"], ["python_–≤—Å–µ"]])


if __name__ == "__main__":
    main()
